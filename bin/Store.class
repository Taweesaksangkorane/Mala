// Source code is decompiled from a .class file using FernFlower decompiler.
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;

public class Store {
   private ArrayList<Item> stockList = new ArrayList();
   private ArrayList<Customer> customerList = new ArrayList();
   private Scanner scanner;

   public Store() {
      this.scanner = new Scanner(System.in);
   }

   private int getValidatedIntegerInput(int var1, int var2, String var3) {
      while(true) {
         System.out.print("> ");
         String var4 = this.scanner.nextLine().trim();

         try {
            BigInteger var5 = new BigInteger(var4);
            BigInteger var6 = BigInteger.valueOf(2147483647L);
            BigInteger var7 = BigInteger.valueOf(-2147483648L);
            if (var5.compareTo(var6) <= 0 && var5.compareTo(var7) >= 0) {
               int var8 = Integer.parseInt(var4);
               if (var8 >= var1 && var8 <= var2) {
                  return var8;
               }

               System.out.println("Invalid input! Please enter a number between " + var1 + " and " + var2 + ".");
            } else {
               System.out.println("Invalid input! Please enter a number between " + var1 + " and " + var2 + ".");
            }
         } catch (NumberFormatException var9) {
            System.out.println("Invalid input! Please enter a number between " + var1 + " and " + var2 + ".");
         }
      }
   }

   public void loadStock() {
      try {
         BufferedReader var1 = new BufferedReader(new FileReader("data/stock.txt"));

         String var2;
         try {
            while((var2 = var1.readLine()) != null) {
               String[] var3 = var2.split(",");
               String var4 = var3[0];
               String var5 = var3[1];
               int var6 = Integer.parseInt(var3[2]);
               if (var4.equals("Meat")) {
                  this.stockList.add(new Meat(var5, var6));
               } else if (var4.equals("Drink")) {
                  this.stockList.add(new Drink(var5, var6));
               } else {
                  this.stockList.add(new Vegetable(var5, var6));
               }
            }
         } catch (Throwable var8) {
            try {
               var1.close();
            } catch (Throwable var7) {
               var8.addSuppressed(var7);
            }

            throw var8;
         }

         var1.close();
      } catch (IOException var9) {
         System.out.println("Error reading stock file.");
      }

   }

   public void run() {
      System.out.println("Welcome to Ma La Skewer Store!");

      while(true) {
         System.out.println("\nMain Menu:");
         System.out.println("1. New Customer");
         System.out.println("2. Show Customer Count");
         System.out.println("3. Check Stock");
         System.out.println("0. Exit");
         System.out.print("Choose option (0–3): ");
         int var1 = this.getValidatedIntegerInput(0, 3, "menu");
         switch (var1) {
            case 0:
               this.saveOrders();
               return;
            case 1:
               System.out.print("Enter customer name (or type 'exit'): ");
               String var2 = this.scanner.nextLine().trim();
               if (!var2.equalsIgnoreCase("exit")) {
                  if (var2.isEmpty()) {
                     System.out.println("Name cannot be empty.");
                  } else {
                     Customer var3 = new Customer(var2);
                     this.orderLoop(var3);
                     this.customerList.add(var3);
                     System.out.println("Total: " + var3.calculateTotal() + " Baht");
                  }
               }
               break;
            case 2:
               this.showCustomerCount();
               break;
            case 3:
               this.showStockSummary();
               break;
            default:
               System.out.println("Invalid menu option! Please choose between 0 and 3.");
         }
      }
   }

   private void orderLoop(Customer var1) {
      while(true) {
         System.out.println("\nSelect a category:");
         System.out.println("1. Meat");
         System.out.println("2. Vegetable");
         System.out.println("3. Drink");
         System.out.println("0. Check Order");
         System.out.print("Select a category (0–3): ");
         int var2 = this.getValidatedIntegerInput(0, 3, "menu");
         Iterator var6;
         int var8;
         int var9;
         if (var2 == 0) {
            System.out.println("\n=== Current Order ===");
            Map var3 = var1.getOrderMap();
            Map var4 = var1.getPriceMap();
            int var5 = 0;
            if (var3.isEmpty()) {
               System.out.println("No items ordered yet.");
            } else {
               for(var6 = var3.keySet().iterator(); var6.hasNext(); var5 += var8 * var9) {
                  String var7 = (String)var6.next();
                  var8 = (Integer)var3.get(var7);
                  var9 = (Integer)var4.get(var7);
                  System.out.println(var7 + " x" + var8 + " = " + var8 * var9 + " Baht");
               }

               System.out.println("Total: " + var5 + " Baht");
            }

            System.out.println("\n1. Add More Menu");
            System.out.println("0. Finish Order");
            String var14 = this.scanner.nextLine();
            if (var14.equals("0")) {
               if (var1.getOrderMap().isEmpty()) {
                  System.out.println("You haven't ordered anything yet!");
                  System.out.println("Please select at least one item before finishing.");
                  continue;
               }

               return;
            }
         }

         String var11 = "";
         if (var2 == 1) {
            var11 = "Meat";
         } else if (var2 == 2) {
            var11 = "Vegetable";
         } else {
            if (var2 != 3) {
               System.out.println("Invalid category.");
               continue;
            }

            var11 = "Drink";
         }

         ArrayList var12 = new ArrayList();
         HashSet var13 = new HashSet();
         var6 = this.stockList.iterator();

         Item var16;
         while(var6.hasNext()) {
            var16 = (Item)var6.next();
            if (var16.getClass().getSimpleName().equals(var11) && !var13.contains(var16.getName())) {
               var12.add(var16);
               var13.add(var16.getName());
            }
         }

         while(true) {
            System.out.println("\n--- " + var11 + " Menu ---");

            int var15;
            for(var15 = 0; var15 < var12.size(); ++var15) {
               var16 = (Item)var12.get(var15);
               System.out.println(var15 + 1 + ". " + var16.getName() + " - " + var16.getPrice() + " Baht (" + var16.getStock() + " left)");
            }

            System.out.println("0. Back to category selection");
            System.out.print("Select item number (0–" + var12.size() + "): ");
            var15 = this.getValidatedIntegerInput(0, var12.size(), "item");
            if (var15 == 0) {
               break;
            }

            try {
               var16 = (Item)var12.get(var15 - 1);
               if (var16.getStock() == 0) {
                  System.out.println("Sorry, " + var16.getName() + " is out of stock!");
               } else {
                  System.out.print("How many Units of " + var16.getName() + "?: ");
                  var8 = this.getValidatedIntegerInput(1, var16.getStock(), "stock");
                  var16.reduceStock(var8);

                  for(var9 = 0; var9 < var8; ++var9) {
                     var1.addItem(var16);
                  }
               }
            } catch (Exception var10) {
               System.out.println("Error: " + var10.getMessage());
            }
         }
      }
   }

   public void saveOrders() {
      try {
         PrintWriter var1 = new PrintWriter(new FileWriter("data/orders.txt"));

         try {
            Iterator var2 = this.customerList.iterator();

            while(var2.hasNext()) {
               Customer var3 = (Customer)var2.next();
               var1.println("Customer: " + var3.getName());
               var1.println("Order:");
               Iterator var4 = var3.getOrderMap().keySet().iterator();

               while(var4.hasNext()) {
                  String var5 = (String)var4.next();
                  int var6 = (Integer)var3.getOrderMap().get(var5);
                  int var7 = (Integer)var3.getPriceMap().get(var5);
                  var1.println(" - " + var5 + " x" + var6 + " = " + var6 * var7 + " Baht");
               }

               var1.println("Total: " + var3.calculateTotal() + " Baht\n");
            }
         } catch (Throwable var9) {
            try {
               var1.close();
            } catch (Throwable var8) {
               var9.addSuppressed(var8);
            }

            throw var9;
         }

         var1.close();
      } catch (IOException var10) {
         System.out.println("Error writing orders file.");
      }

   }

   public void showCustomerCount() {
      System.out.println("Total customers: " + this.customerList.size());
   }

   public void showStockSummary() {
      System.out.println("\n=== Stock Summary ===");
      Iterator var1 = this.stockList.iterator();

      while(var1.hasNext()) {
         Item var2 = (Item)var1.next();
         PrintStream var10000 = System.out;
         String var10001 = var2.getName();
         var10000.println(var10001 + " (" + var2.getClass().getSimpleName() + "): " + var2.getStock() + " left");
      }

   }
}
